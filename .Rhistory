knitr::opts_chunk$set(echo = TRUE)
fread(cmd = "gunzip flights.csv.gz | grep JFK")
library(data.table)
library(dplyr)
library(babynames)
fread("flights.csv.gz")
fread(cmd = "gunzip flights.csv.gz | grep JFK")
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
fwrite(flights, "flights.csv.gz")
fread("flights.csv.gz")
fread(cmd = "zcat flights.csv.gz | grep JFK")
fread(cmd = "cat <(zcat flights.csv.gz | head -n1) <(zcat flights.csv.gz | grep JFK)")
fread(cmd = "cat <(zcat flights.csv.gz | head -n1)")
fread(cmd = "cat <(zcat flights.csv.gz | head -n1)")
fread(cmd = "cat <(zcat flights.csv.gz | head -n1)  <(zcat flights.csv.gz | grep JFK)")
fread(cmd = "cat <(zcat flights.csv.gz | head -n1)")
fread(cmd = "zcat flights.csv.gz | head -n1")
fread(cmd = "zcat flights.csv.gz | head -n2")
fread(cmd = "cat <(zcat flights.csv.gz | head -n2)")
fread(cmd = "zcat flights.csv.gz | cut -d, -f1-9)")
fread(cmd = "zcat flights.csv.gz | cut -d, -f1-9")
fread(cmd = "zcat flights.csv.gz | cut -d, -f1-8")
babynames
?setnames
babynames_dt <- as.data.table(babynames)
babynames_dt <- as.data.table(babynames)
babynames_dt
babynames_dt
class(babynames_dt)
# dplyr
babynames %>%
filter(year == "2000")
# dplyr
babynames %>%
filter(year == 2000)
# dplyr
babynames %>%
filter(year == 2000) %>%
count()
# dplyr
babynames %>%
filter(year == 2000) %>%
nrow()
# dplyr
babynames %>%
filter(year == 2000) %>%
count()
# dplyr
babynames %>%
filter(year == 2000) %>%
nrow()
# data.table
babynames_dt[year == 2000]
# data.table
babynames_dt[year == 2000]
# data.table
babynames_dt[year == 2000] %>%
nrow()
# dplyr
babynames %>%
filter(year == 2000) %>%
nrow()
babynames[babynames$year == 2000]
babynames[babynames$year == 2000, ]
# base R
babynames[year == 2000]
# base R
babynames[babynames$year == 2000]
# base R
babynames[babynames$year == 2000, ]
babynames_dt[year == 2000, ]
babynames["name"]
babynames[["name"]]
# base R
babynames[babynames$year == 2000, c("name", "n")
# base R
babynames[babynames$year == 2000, c("name", "n")]
babynames[year == 2000, 3:4]
babynames[babynames$year == 2000, 3:4]
babynames[babynames$year == 2000, c("name", "n")]
babynames[babynames$year == 2000, 3:4]
babynames_dt[year == 2000, c(name, n)]
# data.table
babynames_dt[year == 2000, .(name, n)]
# base R
babynames[babynames$year == 2000, c("name")] # equivalent to babynames[babynames$year == 2000, 3]
babynames[babynames$year == 2000, c("name")] # equivalent to babynames[babynames$year == 2000, 3]
# data.table
babynames_dt[year == 2000, name]
# data.table
babynames_dt[year == 2000, .(name)]
# base R
babynames[babynames$year == 2000, "name"] # equivalent to babynames[babynames$year == 2000, 3]
# data.table
babynames_dt[year == 2000, name]
babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, .(name)]
# dplyr
babynames %>%
filter(year == 2000) %>%
select(name)
# dplyr
babynames %>%
filter(year == 2000) %>%
pull(name)
# base R
babynames[babynames$year == 2000, ]
# base R
nrow(babynames[babynames$year == 2000, ])
# data.table
babynames_dt[year == 2000, .N]
# base R
nrow(babynames[babynames$year == 2000, ])
# data.table
babynames_dt[year == 2000, .N]
# dplyr
babynames %>%
filter(year == 2000) %>%
count()
# dplyr
babynames %>%
filter(year == 2000) %>%
count() %>%
.[["n"]]
# dplyr
babynames %>%
filter(year == 2000) %>%
count() %>% class() # note that the output is a data
# data.table
babynames_dt[year == 2000, .(.N)]
# dplyr
babynames %>%
filter(year == 2000) %>%
nrow()
# dplyr
babynames %>%
filter(year == 2000) %>%
count()
# data.table
babynames_dt[, .N, by = year]
# data.table
babynames_dt[year = 2000, .N, by = year]
# data.table
babynames_dt[year = 2000, .N]
# data.table
babynames_dt[year == 2000, .N, by = year]
# data.table
babynames_dt[year == 2000, .N]
babynames_dt[year == 2000, .(name)]
babynames_dt[name == "Hannibal", ]
babynames_dt[name == "Hannibal", sum(n)]
babynames_dt[name == "Hannibal", sum(n), by = year]
babynames_dt[name == "Hannibal", sum(n)]
babynames_dt[name == "Hello", sum(n), by = year]
babynames_dt[name == "Hola", sum(n), by = year]
babynames_dt[name == "Manuel", sum(n), by = year]
babynames_dt[name == "Srinivas", sum(n), by = year]
babynames_dt[name == "Rao", sum(n), by = year]
babynames_dt[name == "Thanos", sum(n), by = year]
babynames_dt[name == "Kvothe", sum(n), by = year]
babynames_dt[name == "Denna", sum(n), by = year]
babynames_dt[name == "Gandalf", sum(n), by = year]
babynames_dt[name == "Trinity", sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006, sum(n)]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006, ]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006, n]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006, .(n)]
babynames_dt[name == "Dobbie", sum(n), by = year]
babynames_dt[name == "Catan", sum(n), by = year]
babynames_dt[name == "Azkaban", sum(n), by = year]
babynames_dt[name == "Rincewind", sum(n), by = year]
bb2 <- babynames_dt
babynames_dt[, firstletter := substr(name, 1, 1)]
bb2
# base R
babynames[babynames$year == 2000, "name"] # equivalent to babynames[babynames$year == 2000, 3]
# data.table
babynames_dt[year == 2000, name] # NOT the same as babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, list(name)]
babynames_dt[year == 2000, .(name)]
# dplyr
babynames %>%
filter(year == 2000) %>%
select(name)
babynames_dt$firstletter <- substr(babynames_dt$name, start = 1, stop = 1)
babynames_dt
babynames_dt[ , firstletter := substr(name, start = 1, stop = 1)]
# count first letters
babynames_dt[ , .N, by = firstletter]
head(babynames_dt)
babynames_dt[ , .N, by = firstletter]
babynames_dt[name == "Trinity", n]
babynames_dt[name == "Trinity", .(year, n)]
babynames_dt$year > 1994
sum(babynames_dt$year > 1994)
sum(2006 > babynames_dt$year > 1994)
?range
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, n)]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, sum(n))]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, n)]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, n)]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, sum(n))]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(year, sum(n)), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , total = sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , c("total") = sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , sum(n), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year]
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_line() +
theme_bw()
library(ggplot2)
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_line() +
theme_bw()
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_point() +
geom_line() +
theme_bw()
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_point() +
geom_line()
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_line()
babynames_dt[order(firstletter), ]
babynames_dt[ , .N, by = firstletter][order(firstletter)]
babynames_dt[ , .N, by = firstletter][-order(firstletter)]
babynames_dt[ , .N, by = firstletter][order(-firstletter)]
counts_by_letter <- babynames_dt[ , .N, by = firstletter]
counts_by_letter
counts_by_letter[order(firstletter)]  # A to Z
counts_by_letter[order(-firstletter)] # Z to A
setorder(counts_by_letter, firstletter)
counts_by_letter
setorder(counts_by_letter, -firstletter)
counts_by_letter
letters_df <- data.table(letter = LETTERS, letter_no = 1:26)
letters_df
counts_by_letter
letters_df <- data.table(firstletter = LETTERS, letter_no = 1:26)
letters_df
counts_by_letter[letters, , by = firstletter]
letters_df <- data.table(firstletter = LETTERS, letter_no = 1:26)
letters_df
counts_by_letter[letters, on = firstletter]
counts_by_letter[letters_df, on = firstletter]
counts_by_letter[letters_df, on = "firstletter"]
counts_by_letter[letters_df, on = .(firstletter)]
counts_by_letter <- babynames_dt[ , sum(n), by = firstletter]
counts_by_letter
babynames_dt[name == "Trinity" & year > 1994 & year < 2006 , .(total = sum(n)), by = year] %>%
ggplot(aes(x = year, y = total)) +
geom_line()
counts_by_letter[order(firstletter)]  # A to Z
counts_by_letter[order(-firstletter)] # Z to A
counts_by_letter <- babynames_dt[ , .(total = sum(n)), by = firstletter]
counts_by_letter
counts_by_letter[order(firstletter)]  # A to Z
counts_by_letter[order(-firstletter)] # Z to A
counts_by_letter[order(total)]   # ascending total
counts_by_letter[order(-total)]  # descending total
setorder(counts_by_letter, -firstletter)
counts_by_letter
letters_df <- data.table(firstletter = LETTERS, letter_no = 1:26)
letters_df
counts_by_letter[letters_df, on = .(firstletter)]
babynames_dt[, .(total = sum(n)), by = .(firstletter, year)]
counts_by_letter_and_year <- babynames_dt[, .(total = sum(n)), by = .(firstletter, year)]
counts_by_letter_and_year
dcast(counts_by_letter_and_year, firstletter ~ ...)
dcast(counts_by_letter_and_year, year ~ ...)
counts_by_letter_and_year
dcast(counts_by_letter_and_year, year ~ ...)
dcast(counts_by_letter_and_year, year ~ firstletter)
dcast(counts_by_letter_and_year, year ~ firstletter) %>%
ggplot(aes(x = year, y = J)) +
geom_line()
widetable <- dcast(counts_by_letter_and_year, year ~ firstletter)
widetable
widetable %>%
ggplot(aes(x = year, y = J)) +
geom_line()
counts_by_letter_and_year %>%
ggplot(aes(x = year, y = firstletter, colour = firstletter)) +
geom_line()
counts_by_letter_and_year
counts_by_letter_and_year %>%
ggplot(aes(x = year, y = total, colour = firstletter)) +
geom_line()
widetable %>%
ggplot(aes(x = year, y = J)) +
geom_line()
?melt
widetable
melt(widetable, id.vars = c(LETTERS), measure.vars = year, variable.name = "letter", value.name = "total")
melt(widetable, id.vars = c(LETTERS), measure.vars = c(year), variable.name = "letter", value.name = "total")
melt(widetable, id.vars = c(LETTERS), measure.vars = c("year"), variable.name = "letter", value.name = "total")
melt(widetable, id.vars = c(LETTERS), variable.name = "letter", value.name = "total")
melt(widetable, id.vars = year, variable.name = "letter", value.name = "total")
melt(widetable, id.vars = c(year), variable.name = "letter", value.name = "total")
melt(widetable, id.vars = c("year"), variable.name = "letter", value.name = "total")
counts_by_letter_and_year
babynames_dt
?rev
strsplit("apple", "")
strsplit("apple", "")[[1]]
rev(strsplit("apple", "")[[1]])
paste0(rev(strsplit("apple", "")[[1]]))
paste0(rev(strsplit("apple", "")[[1]]), collapse = "")
paste(rev(strsplit("apple", "")[[1]]), collapse = "")
paste(rev(strsplit("hannah", "")[[1]]), collapse = "")
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = paste(rev(strsplit(name, "")[[1]]), collapse = "")
return(name == rev_name)
}
is_palindrome("hannah")
is_palindrome("hannahl")
is_palindrome("lol")
is_palindrome("lole")
# is_palindrome("lol")
babynames_dt[is_palindrome(name), ]
# is_palindrome(c("lol", "lolw"))
is_palindrome(c("lol", "lolw"))
paste(rev(strsplit(c("lol", "wow"), "")[[1]]), collapse = "")
is_palindrome(c("lol", "lolw"))
is_palindrome(babynames_dt$name)
sum(is_palindrome(babynames_dt$name))
babynames_dt$name
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = paste(rev(strsplit(name, "")[[1]]), collapse = "")
print(paste(name, rev_name))
return(name == rev_name)
}
is_palindrome <- function(name) {
is_palindrome(babynames_dt$name)
paste(rev(strsplit(babynames_dt$name[10], "")[[1]]), collapse = "")
paste(rev(strsplit(babynames_dt$name[10], "")), collapse = "")
strsplit(babynames_dt$name[10], "")
paste(rev(strsplit(babynames_dt$name[1:10], "")[[1]]), collapse = "")
paste(rev(strsplit(babynames_dt$name[1:10], "")), collapse = "")
strsplit(babynames_dt$name[1:10], "")
lapply(strsplit(babynames_dt$name[1:10], ""), rev)
lapply(strsplit(babynames_dt$name[1:10], ""), function(x) paste(rev(x), collapse = ""))
sapply(strsplit(babynames_dt$name[1:10], ""), function(x) paste(rev(x), collapse = ""))
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = sapply(strsplit(name, ""), function(x) paste(rev(x), collapse = ""))
print(paste(name, rev_name))
return(name == rev_name)
}
is_palindrome(babynames_dt$name)
?tolower
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = sapply(strsplit(tolower(name), ""), function(x) paste(rev(x), collapse = ""))
print(paste(name, rev_name))
return(name == rev_name)
}
is_palindrome(babynames_dt$name[1:10])
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = sapply(strsplit(name, ""), function(x) paste(rev(x), collapse = ""))
print(paste(name, rev_name))
return(tolower(name) == tolower(rev_name))
}
is_palindrome(babynames_dt$name[1:10])
# function to check if a string is a palindrome
is_palindrome <- function(name) {
rev_name = sapply(strsplit(name, ""), function(x) paste(rev(x), collapse = ""))
# print(paste(name, rev_name))
return(tolower(name) == tolower(rev_name))
}
is_palindrome(babynames_dt$name[1:10])
is_palindrome("lol")
is_palindrome("lole")
# is_palindrome("lol")
babynames_dt[is_palindrome(name), ]
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = name]
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = name][order(-total), ]
babynames_dt %>%
filter(is_palindrome(name)) %>%
group_by(name) %>%
summarise(total = sum(n)) %>%
arrange(desc(total))
?group
?aggregate
babynames_palindromic <- babynames_dt[is_palindrome(babynames_dt$name), ]
babynames_palindromic
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = .(name, year)][order(-total), ]
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = .(name, year)][order(-year), ]
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = name][order(-total), ]
# is_palindrome("lol")
babynames_dt[is_palindrome(name), .(total = sum(n)), by = name][order(-total), ]
babynames_palindromic
aggregate(babynames_palindromic, by = babynames_palindromic$name, FUN = "sum"]
aggregate(babynames_palindromic, by = babynames_palindromic$name, FUN = "sum")
aggregate(babynames_palindromic, by = list(babynames_palindromic$name), FUN = "sum")
aggregate(babynames_palindromic$n, by = list(babynames_palindromic$name), FUN = "sum")
babynames_aggregated <- aggregate(babynames_palindromic$n, by = list(babynames_palindromic$name), FUN = "sum")
babynames_aggregated
babynames_aggregated[order(babynames_aggregated$x)]
babynames_aggregated[order(babynames_aggregated$x), ]
babynames_aggregated[-order(babynames_aggregated$x), ]
?order
babynames_aggregated[order(babynames_aggregated$x, decreasing = FALSE), ]
babynames_aggregated[order(babynames_aggregated$x, decreasing = TRUE), ]
?arrange
?fwrite
?fread
?babynames
babynames_dt[year == 1983, .(total = sum(n))][1, ]
babynames_dt[year == 1983, ][1, ]
babynames_dt[year == 1983, sum(n)][1, ]
babynames_dt[year == 1983, sum(n)]
babynames_dt[year == 1983, sum(n), by = name]
babynames_dt[year == 1983 & name == "Jennifer"]
babynames_dt[year > 1980 & year < 1997, sum(n), by = name]
babynames_dt[year > 1980 & year < 1997, sum(n), by = name][order(-V1)]
babynames_dt[year < 1980 & year < 1950, sum(n), by = name][order(-V1)]
babynames_dt[year < 1980 & year > 1950, sum(n), by = name][order(-V1)]
babynames[babynames$year == 2000, "name"]
babynames[babynames$year == 2000, 3]
iris[iris$Species == "versicolor"]
iris[iris$Species == "versicolor", ]
iris[iris$Species == "versicolor", "Species"]
iris[iris$Species == "versicolor", 4]
iris[iris$Species == "versicolor", list(4)]
iris[iris$Species == "versicolor", c(4)]
iris[iris$Species == "versicolor", c(3, 4)]
as.data.frame(babynames)
class(as.data.frame(babynames))
class(babynames)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
class(babynames)
babynames_df <- as.data.frame(babynames)
class(babynames_df)
class(babynames_dt)
head(babynames_dt)
class(babynames)
babynames_df <- as.data.frame(babynames)
class(babynames_df)
babynames_dt <- as.data.table(babynames)
class(babynames_dt)
head(babynames_dt)
# base R
babynames_df[babynames_df$year == 1880, ]
# data.table
babynames_dt[year == 1880] # equivalent to babynames_dt[year == 2000, ]
# base R
babynames_df[babynames_df$year == 2000, "name"] # equivalent to babynames[babynames$year == 2000, 3]
# data.table
babynames_dt[year == 2000, name] # NOT the same as babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, name] # NOT the same as babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, 3]
babynames_dt[year == 2000, list(name)]
babynames_dt[year == 2000, .(name)]
# dplyr
babynames %>%
filter(year == 2000) %>%
select(name)
# base R
nrow(babynames_df[babynames_df$year == 2000, ]) # returns an atomic vector
# data.table
babynames_dt[year == 2000, .N] # returns an atomic vector here, but a data.table is returned if there is more than 1 group
# dplyr
babynames %>%
filter(year == 2000) %>%
count() # returns a tibble
babynames_dt[year == 2000, .(.N)] # or wrap j in .()
# dplyr
babynames %>%
filter(year == 2000) %>%
count() # returns a tibble
babynames_palindromic <- babynames_df[is_palindrome(babynames_df$name), ]
babynames_aggregated <- aggregate(babynames_palindromic$n, by = list(babynames_palindromic$name), FUN = "sum")
babynames_aggregated[order(babynames_aggregated$x, decreasing = TRUE), ]
babynames_df[babynames_df$year == 1880]
babynames_df[babynames_df$year == 1880]
babynames_dt[[3]]
iris[1]
?order
order(10:1)
order(1:10)
order(c(9,2, 24, 981))
?melt
widetable
widetable %>%
ggplot(aes(x = year, y = Z)) +
geom_line()
counts_by_letter_and_year %>%
ggplot(aes(x = year, y = total, colour = firstletter)) +
geom_line()
